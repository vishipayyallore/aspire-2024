@page "/raiseticket"

@using System.ComponentModel.DataAnnotations
@using Azure.Storage.Blobs
@using Azure.Storage.Queues
@using First.AspireApp.Web.Data
@using First.AspireApp.Web.Data.Dtos
@using Microsoft.EntityFrameworkCore
@using System.Text.Json

@inject SupportTicketDbContext context
@inject BlobServiceClient BlobClient
@inject QueueServiceClient QueueServiceClient
@inject ILogger<RaiseTicket> Logger

<PageTitle>Home</PageTitle>

<div class="text-center">
    <h1 class="display-4">Request Support</h1>
</div>

<EditForm Model="@Ticket" FormName="Tickets" method="post"
          OnValidSubmit="@HandleValidSubmit" enctype="multipart/form-data">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-4">
        <label>Issue Title</label>
        <InputText class="form-control" @bind-Value="@Ticket.Title" />
        <ValidationMessage For="() => Ticket.Title" />
    </div>
    <div class="mb-4">
        <label>Issue Description</label>
        <InputText class="form-control" @bind-Value="@Ticket.Description" />
        <ValidationMessage For="() => Ticket.Description" />
    </div>
    <div class="mb-4">
        <label>Attachment</label>
        <InputFile class="form-control" name="Ticket.Document" />
        <ValidationMessage For="() => Ticket.Document" />
    </div>
    <button class="btn btn-primary" type="submit">Submit</button>
    <button class="btn btn-danger mx-2" type="reset" @onclick=@ClearForm>Clear</button>
</EditForm>

@code {
    [SupplyParameterFromForm(FormName = "Tickets")]
    private SupportTicket Ticket { get; set; } = new();

    private List<SupportTicketDto> Tickets = [];

    protected override async Task OnInitializedAsync()
    {
        Tickets = await context.Tickets.ToListAsync();
    }

    private async Task HandleValidSubmit()
    {
        Logger.LogInformation("Uploading file to blob storage");
        var docsContainer = BlobClient.GetBlobContainerClient("fileuploads");
        var blobClient = docsContainer.GetBlobClient(Ticket.Document.FileName);

        // Upload file to blob storage with overwrite option
        await blobClient.UploadAsync(Ticket.Document.OpenReadStream(), overwrite: true);
        Logger.LogInformation("File uploaded successfully.");

        // Save it in the database
        var newSupportTicket = new SupportTicketDto { Title = Ticket.Title, Description = Ticket.Description, AssignedToName = "Unassigned" };

        await context.Tickets.AddAsync(newSupportTicket);
        await context.SaveChangesAsync();

        // Send message to queue
        var queueClient = QueueServiceClient.GetQueueClient("tickets");

        var jsonString = JsonSerializer.Serialize(newSupportTicket);
        // await queueClient.SendMessageAsync(jsonString);
        await queueClient.SendMessageAsync(Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(jsonString)));

        Tickets = await context.Tickets.ToListAsync();
    }

    private void ClearForm() => Ticket = new();

    private class SupportTicket()
    {
        [Required] public string Title { get; set; } = default!;
        [Required] public string Description { get; set; } = default!;
        [Required] public IFormFile Document { get; set; } = default!;
    }
}